git init --Inicializa un repositorio en una carpeta, Arranca el repositorio
git add nombreArchivo.extension -- Avisa al repositorio sobre la existencia de este nombreArchivo
--con esto el sistema de cambios de git sabe que existe tal archivo
git add . -- Añade todos los archivos de una carpeta
--con esto el sistema de cambios de git sabe que existe tales archivos añadidos.
git commit -m "Comentarios sobre la confirmación de cambios" -- Envia los ultimos cambios a la base de datos del sistema
-- de control de versiones.
===[Buena práctica]: Añadir Comentarios a los co    mmit
git status -- ver el estado del sistema de control de versiones
git show -- cambios historicos hechos sobre un repositorio
git log archivo.extension -- Muestra los cambios historicos sobre un archivo especifico.
git push -- Enviar los cambios hacia un repositorio.
git pull -- trae los ultimos cambios de un repositorio.

--Git solo puede guardar y modificar archivos de texto plano, igual maneja archivos binarios pero no es tan preciso.
git rm --cached historia.txt ---Con este comando quitamos de la base de datos del sistema de cambios el archivo en cuestion.
git config --list   ---- Para ver cual es la configuración de las variables de git
git config --list --show-origin --- Muestra en donde se guardan las configuraciones de Git.
git config --global user.name "Juan Jimenez" --- Para modificar la variable de user.name
git config --global user.email "jimenezduranjm@gmail.com"  --- Para modificar la variable de user.email
git show nombreArchivo.extension -- Muestra los cambios puntuales dentro de un archivo.
git diff UUIDMOSTRECENTLY UUIDMOSTANTIGUO --Nos muestra la diferencia en los commits de una versión mas reciente a una mas antigua, esto claro
                                          --no es regla

--- ¿ Que pasa cuando escribo git init ?
/**
1.- Se crea un área en memoria RAM que se llama staging. Es un area en memoria RAM en donde en principio se agregaran los cambios.
2.- Se crear un repositorio, /.git / folder, todos los cambios al final del proyecto.
2.1.- Los archivos sin git add . estan en el estado untracked, sin rastrear
3.- con git add . -- los archivos agregados pasan a vivir al staging, en este punto los archivos estan en espera de pasar el repositorio.
Y los archivos pasan al status Tracked
4.- git commit -- los archivos se van al repositorio, por defecto es nombre es master, pasan a estatus Tracked pero en el repositorio.
commit 3c0daf601afee2a46d900e1233e7f47a3411575e nombre del commit en la base de datos de git
**/

git log -- Con este comando obtemos un listado de los commit hechos en el repositorio.

/**

"git reset nos permite volver a una versión anterior
"existen dos tipo de reset, hard y soft"
--hard todo vuelve al estado anterior, eliminar todos los demas commit despues del que se hizo el reset.
--soft volvemos al estado anterior, pero lo que esté en staging se mantiene.
**/

git reset 3c0daf601afee2a46d900e1233e7f47a3411575e --hard   --- Esto elimina, es una forma de volver al pasado de una forma agresiva.
git reset 3c0daf601afee2a46d900e1233e7f47a3411575e --soft

git log --stat      --- Nos muestra el listado de commits pero con el detalle de los cambios-

git checkout 3c0daf601afee2a46d900e1233e7f47a3411575e historia.txt     ---Para obtener la versión de un commit especifico. Esto es solo para obtener.

git rm ["opcion"] --cached nombreArchivo.extension  : Elimina los archivos del área de Staging y del próximo commit pero los mantiene en nuestro disco duro.
git rm ["opcion"] --force nombreArchivo.extension : Elimina los archivos de Git y del disco duro. Git siempre guarda todo, por lo que podemos acceder al registro de la existencia de los archivos, de modo que podremos recuperarlos si es necesario (pero debemos usar comandos más avanzados).

/*
    Para eliminar todos los archivos del staging
*/

git rm -r --cached .

git branch nombreRama ---- Para crear una rama.

git branch ----Para ver que ramas existen y en cual estoy.

git status ----Desde aqui tambien podemos ver en que rama nos encontramos.

git checkout nombreBranch  ---Para moverse hacia otras ramas.

git commit -am "Comentarios"  ---- Lo que hace esta línea es hacer un git add y un git commit -m de un solo paso. Aclaro esto solo funciona
-----con archivos que ya hayan estado en staging.

git merge nombreBranch  ---- con esto hacemos merge con el branch actual y la rama especificada.

git mergetools ---con esta opcion si nos da conflictos cuando queremos hacer merge podemos elegir como se fucionan los cambios.







